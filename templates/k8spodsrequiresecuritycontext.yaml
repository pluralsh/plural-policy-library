apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  name: k8spodsrequiresecuritycontext
spec:
  crd:
    spec:
      names:
        kind: K8sPodsRequireSecurityContext
      validation:
        legacySchema: false
        openAPIV3Schema:
          properties:
            exemptImages:
              description: A list of exempt Images.
              items:
                type: string
              type: array
          type: object
  targets:
  - rego: |
      package k8spodsrequiresecuritycontext

      violation[{"msg": msg}] {
        input.review.kind.kind == "Pod"
        container := input.review.object.spec.containers[_]
        not is_exempt_image(container)
        has_empty_security_context(container)
        has_empty_security_context(input.review.object.spec)
        msg := "securityContext must be defined for all Pod containers"
      }

      violation[{"msg": msg}] {
        input.review.kind.kind == "Pod"
        initContainer := input.review.object.spec.initContainers[_]
        not is_exempt_image(initContainer)
        has_empty_security_context(initContainer)
        has_empty_security_context(input.review.object.spec)
        msg := "securityContext must be defined for all Pod initContainers"
      }

      violation[{"msg": msg}] {
        input.review.kind.kind == "Pod"
        not input.review.object.spec.containers
        not input.review.object.spec.initContainers
        has_empty_security_context(input.review.object.spec)
        msg := "securityContext must be defined for Pod"
      }

      has_empty_security_context(spec) {
        spec.securityContext == {}
      }

      has_empty_security_context(spec) {
        not spec.securityContext
      }

      has_empty_security_context(spec) {
        spec.securityContext == null
      }

      is_exempt_image(container) {
        exempt_image := input.parameters.exemptImages[_]
        not endswith(exempt_image, "*")
        container.image == exempt_image
      }

      is_exempt_image(container) {
        exempt_image := input.parameters.exemptImages[_]
        endswith(exempt_image, "*")
        startswith(container.image, trim_suffix(exempt_image, "*"))
      }
    target: admission.k8s.gatekeeper.sh
