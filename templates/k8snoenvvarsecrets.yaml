apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  name: k8snoenvvarsecrets
spec:
  crd:
    spec:
      names:
        kind: K8sNoEnvVarSecrets
      validation:
        legacySchema: false
  targets:
  - rego: |
      package k8snoenvvarsecrets

      violation[{"msg": msg}] {
        input.review.kind.kind == "Pod"
        container := input.review.object.spec.containers[_]
        env_var := container.env[_]
        env_var.valueFrom.secretKeyRef
        msg := sprintf("Container <%v> has secret defined as environment variable", [container.name])
      }

      violation[{"msg": msg}] {
        input.review.kind.kind == "Pod"
        initContainer := input.review.object.spec.initContainers[_]
        env_var := initContainer.env[_]
        env_var.valueFrom.secretKeyRef
        msg := sprintf("initContainer <%v> has secret defined as environment variable", [initContainer.name])
      }
    target: admission.k8s.gatekeeper.sh
