apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  name: asmauthzpolicyenforcesourceprincipals
spec:
  crd:
    spec:
      names:
        kind: AsmAuthzPolicyEnforceSourcePrincipals
      validation:
        legacySchema: false
  targets:
  - rego: |
      package asm.security.authorizationpolicy

      spec := input.review.object.spec

      is_authzpolicy(kind) {
        kind.kind == "AuthorizationPolicy"
        kind.group == "security.istio.io"
      }

      ################
      # From Source Principals
      ################

      # spec.rules[].from[].source.principals does not exist
      violation[{"msg": msg}] {
        is_authzpolicy(input.review.kind)
        from := spec.rules[_].from
        not contains_principals(from)
        msg := "source.principals does not exist"
      }

      contains_principals(from) {
        from[_].source.principals
      }

      # spec.rules[].from[].source.principals[] does not contain '*'
      violation[{"msg": msg}] {
        is_authzpolicy(input.review.kind)
        principal := spec.rules[_].from[_].source.principals[_]
        principal == "*"
        msg := "source.principals[] cannot be '*'"
      }
    target: admission.k8s.gatekeeper.sh
